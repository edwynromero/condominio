<?php

Yii::import('application.models._base.BasePayNotCashInfo');


/**
 * This is the model base class for the table "mip_pay_not_cash_info".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "PayNotCashInfo".
 *
 * Columns in table "mip_pay_not_cash_info" available as properties of the model,
 * followed by relations of table "mip_pay_not_cash_info" available as properties of the model.
 *
 * @property integer $id
 * @property integer $pay_id
 * @property string $pay_date
 * @property integer $bank_account_id
 * @property string $number
 * @property string $type
 * @property string $value
 * @property integer $source_bank_id
 * @property integer $checked
 *
 * @property BankAccount $bankAccount
 * @property Bank $sourceBank
 * @property Pay $pay
 */
class PayNotCashInfo extends BasePayNotCashInfo
{
   
    const PAY_TYPE_CHECK       = 'C';
    const PAY_TYPE_VOUCHER     = 'V';
    const PAY_TYPE_TRANSFER    = 'T';
    
    const PAY_TYPE_CHECK_LABEL       = 'Check';
    const PAY_TYPE_VOUCHER_LABEL     = 'Voucer';
    const PAY_TYPE_TRANSFER_LABEL    = 'Transference';
    const PAY_TYPE_NOT_DEFINED_LABEL = "Type Not Defined";
    
    /**
     * 
     * @param type $className
     * @return type
     */
    public static function model($className=__CLASS__) {
            return parent::model($className);
    }
    
    
    
    /**
     * Obtiene la etiqueta del tipo de pago NO EFECTIVO
     * 
     * @param string $value
     * @return string
     */
    public static function getTypeLabel($value){
        switch($value){
            case self::PAY_TYPE_CHECK:
                return self::PAY_TYPE_CHECK_LABEL;
                break;
            case self::PAY_TYPE_VOUCHER:
                return self::PAY_TYPE_VOUCHER_LABEL;
                break;
            case self::PAY_TYPE_TRANSFER:
                return self::PAY_TYPE_TRANSFER_LABEL;
                break;
            default:
                return self::PAY_TYPE_NOT_DEFINED_LABEL;
                break;
            
        }
    }
    
    
    /**
     * 
     * @return type
     */
    public function rules() {
    	$rules = parent::rules();
    	return CMap::mergeArray( array(
    			array('source_bank_id', 'required', 'message' =>MipHelper::t('The source bank is required'), 'on' => 'site_report_pay'),
    			array('value', 'required', 'message' =>MipHelper::t('The amount is required'), 'on' => 'site_report_pay'),
    			array('number', 'required', 'message' =>MipHelperFront::t("The Voucher Number or Issuing Bank Number is required"), 'on' => 'site_report_pay'),
    			array('type', 'required', 'message' =>MipHelper::t('The type is required'), 'on' => 'site_report_pay'),
    			array('pay_date', 'required', 'message' =>MipHelperFront::t('The date is required'), 'on' => 'site_report_pay'),
    			array('id, pay_id, bank_account_id, number, type, value, source_bank_id, checked', 'safe', 'on'=>'review'),
    	), $rules);
    }

    
    /**
     * 
     * @return type
     */
    public function relations() {
            return array(
                  'sourceBank' => array(self::BELONGS_TO, 'Bank', 'bank_id'),
                  'targetAccount' => array(self::BELONGS_TO, 'BankAccount', 'bank_account_id'),
            );
    }
    
    

    /**
     * 
     * @return type
     */
    public function attributeLabels() {
    	return array(
    			'id' => Yii::t('app', 'ID'),
    			'pay_id' => null,
    			'pay_date' => Yii::t('app', 'Pay Date'),
    			'bank_account_id' => Yii::t('app', 'Bank Account'),
    			'number' => Yii::t('app', 'Number'),
    			'type' => Yii::t('app', 'Type'),
    			'value' => Yii::t('app', 'Value'),
    			'source_bank_id' => Yii::t('app', 'Source Bank Account'),
    			'checked' => Yii::t('app', 'Checked'),
    			'bankAccount' => null,
    			'sourceBank' => null,
    			'pay' => null,
    	);
    }
    
    
    
    /**
     * 
     * @return \CActiveDataProvider
     */
    public function review() {
    	$criteria = new CDbCriteria;
    	$criteria->join = "";
    	$criteria->params = array();
    
    	$criteria->compare('id', $this->id);

    	if(!empty($this->pay_id))
    	{
    		$criteria->join .= " INNER JOIN mip_pay p ON ( t.pay_id = p.id )";
    		$criteria->join .= " INNER JOIN mip_person pe ON ( pe.id = p.person_id  AND ( UPPER(pe.first_name) LIKE :payer_name OR UPPER(pe.last_name) LIKE :payer_name OR UPPER(pe.full_name) LIKE :payer_name ) )";
    		$criteria->params[":payer_name"] = "%" . strtoupper( $this->pay_id  ) . "%";
    	}
    	
    	
    	$criteria->compare('bank_account_id', $this->bank_account_id);
    	$criteria->compare('number', $this->number, true);
    	$criteria->compare('type', $this->type, true);
    	$criteria->compare('value', $this->value, true);
    	$criteria->compare('source_bank_id', $this->source_bank_id);

    	$criteria->compare('checked', $this->checked);
    	
    
    	return new CActiveDataProvider($this, array(
    			'criteria' => $criteria,
    			'sort'=>array(
    					'defaultOrder'=>'pay_date DESC',
    			)
    	));
    }
	
}