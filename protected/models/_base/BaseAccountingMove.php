<?php

/**
 * This is the model base class for the table "mip_accounting_move".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "AccountingMove".
 *
 * Columns in table "mip_accounting_move" available as properties of the model,
 * followed by relations of table "mip_accounting_move" available as properties of the model.
 *
 * @property integer $id
 * @property integer $journal_id
 * @property string $label
 * @property string $debt
 * @property string $credt
 * @property string $date_at
 * @property string $created_at
 * @property string $updated_at
 * @property string $status
 *
 * @property AccountingJournal $journal
 * @property AccountingMoveStatus $status0
 * @property AccountingMoveLine[] $accountingMoveLines
 */
abstract class BaseAccountingMove extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'mip_accounting_move';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'AccountingMove|AccountingMoves', $n);
	}

	public static function representingColumn() {
		return 'label';
	}

	public function rules() {
		return array(
			array('journal_id, label, date_at, created_at, status', 'required'),
			array('journal_id', 'numerical', 'integerOnly'=>true),
			array('label', 'length', 'max'=>128),
			array('debt, credt', 'length', 'max'=>10),
			array('status', 'length', 'max'=>4),
			array('updated_at', 'safe'),
			array('debt, credt, updated_at', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, journal_id, label, debt, credt, date_at, created_at, updated_at, status', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'journal' => array(self::BELONGS_TO, 'AccountingJournal', 'journal_id'),
			'status0' => array(self::BELONGS_TO, 'AccountingMoveStatus', 'status'),
			'accountingMoveLines' => array(self::HAS_MANY, 'AccountingMoveLine', 'accounting_move_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'journal_id' => null,
			'label' => Yii::t('app', 'Label'),
			'debt' => Yii::t('app', 'Debt'),
			'credt' => Yii::t('app', 'Credt'),
			'date_at' => Yii::t('app', 'Date At'),
			'created_at' => Yii::t('app', 'Created At'),
			'updated_at' => Yii::t('app', 'Updated At'),
			'status' => null,
			'journal' => null,
			'status0' => null,
			'accountingMoveLines' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('journal_id', $this->journal_id);
		$criteria->compare('label', $this->label, true);
		$criteria->compare('debt', $this->debt, true);
		$criteria->compare('credt', $this->credt, true);
		$criteria->compare('date_at', $this->date_at, true);
		$criteria->compare('created_at', $this->created_at, true);
		$criteria->compare('updated_at', $this->updated_at, true);
		$criteria->compare('status', $this->status);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}