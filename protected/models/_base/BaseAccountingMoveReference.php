<?php

/**
 * This is the model base class for the table "mip_accounting_move_reference".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "AccountingMoveReference".
 *
 * Columns in table "mip_accounting_move_reference" available as properties of the model,
 * followed by relations of table "mip_accounting_move_reference" available as properties of the model.
 *
 * @property integer $id
 * @property string $type
 * @property string $label
 * @property string $value
 * @property integer $move_id
 * @property string $created_at
 * @property string $updated_at
 *
 * @property AccountingMove $move
 * @property AccountingMoveRefType $type0
 */
abstract class BaseAccountingMoveReference extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'mip_accounting_move_reference';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'AccountingMoveReference|AccountingMoveReferences', $n);
	}

	public static function representingColumn() {
		return 'label';
	}

	public function rules() {
		return array(
			array('type, label, value, move_id, created_at', 'required'),
			array('move_id', 'numerical', 'integerOnly'=>true),
			array('type', 'length', 'max'=>8),
			array('label', 'length', 'max'=>64),
			array('value', 'length', 'max'=>16),
			array('updated_at', 'safe'),
			array('updated_at', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, type, label, value, move_id, created_at, updated_at', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'move' => array(self::BELONGS_TO, 'AccountingMove', 'move_id'),
			'type0' => array(self::BELONGS_TO, 'AccountingMoveRefType', 'type'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'type' => null,
			'label' => Yii::t('app', 'Label'),
			'value' => Yii::t('app', 'Value'),
			'move_id' => null,
			'created_at' => Yii::t('app', 'Created At'),
			'updated_at' => Yii::t('app', 'Updated At'),
			'move' => null,
			'type0' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('type', $this->type);
		$criteria->compare('label', $this->label, true);
		$criteria->compare('value', $this->value, true);
		$criteria->compare('move_id', $this->move_id);
		$criteria->compare('created_at', $this->created_at, true);
		$criteria->compare('updated_at', $this->updated_at, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}