<?php

/**
 * This is the model base class for the table "mip_accounting_journal".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "AccountingJournal".
 *
 * Columns in table "mip_accounting_journal" available as properties of the model,
 * followed by relations of table "mip_accounting_journal" available as properties of the model.
 *
 * @property integer $id
 * @property string $code
 * @property string $title
 * @property string $note
 * @property integer $credt_account_id
 * @property integer $debt_account_id
 * @property string $journal_type
 * @property integer $deprecated
 * @property string $created_at
 * @property string $updated_at
 *
 * @property AccountingAccount $credtAccount
 * @property AccountingAccount $debtAccount
 * @property AccountingJournalType $journalType
 * @property AccountingMove[] $accountingMoves
 */
abstract class BaseAccountingJournal extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'mip_accounting_journal';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'AccountingJournal|AccountingJournals', $n);
	}

	public static function representingColumn() {
		return 'code';
	}

	public function rules() {
		return array(
			array('code, title, credt_account_id, debt_account_id, journal_type, created_at', 'required'),
			array('credt_account_id, debt_account_id, deprecated', 'numerical', 'integerOnly'=>true),
			array('code', 'length', 'max'=>5),
			array('title', 'length', 'max'=>64),
			array('journal_type', 'length', 'max'=>4),
			array('note, updated_at', 'safe'),
			array('note, deprecated, updated_at', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, code, title, note, credt_account_id, debt_account_id, journal_type, deprecated, created_at, updated_at', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'credtAccount' => array(self::BELONGS_TO, 'AccountingAccount', 'credt_account_id'),
			'debtAccount' => array(self::BELONGS_TO, 'AccountingAccount', 'debt_account_id'),
			'journalType' => array(self::BELONGS_TO, 'AccountingJournalType', 'journal_type'),
			'accountingMoves' => array(self::HAS_MANY, 'AccountingMove', 'journal_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'code' => Yii::t('app', 'Code'),
			'title' => Yii::t('app', 'Title'),
			'note' => Yii::t('app', 'Note'),
			'credt_account_id' => null,
			'debt_account_id' => null,
			'journal_type' => null,
			'deprecated' => Yii::t('app', 'Deprecated'),
			'created_at' => Yii::t('app', 'Created At'),
			'updated_at' => Yii::t('app', 'Updated At'),
			'credtAccount' => null,
			'debtAccount' => null,
			'journalType' => null,
			'accountingMoves' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('code', $this->code, true);
		$criteria->compare('title', $this->title, true);
		$criteria->compare('note', $this->note, true);
		$criteria->compare('credt_account_id', $this->credt_account_id);
		$criteria->compare('debt_account_id', $this->debt_account_id);
		$criteria->compare('journal_type', $this->journal_type);
		$criteria->compare('deprecated', $this->deprecated);
		$criteria->compare('created_at', $this->created_at, true);
		$criteria->compare('updated_at', $this->updated_at, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}